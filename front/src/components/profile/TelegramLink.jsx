import React, { useState, useContext, useEffect } from 'react';
import { AuthContext } from '../../contexts/AuthContext';
import { apiService } from '../../services/api';

const TelegramLink = () => {
  const { user, updateUser } = useContext(AuthContext);
  const [linkCode, setLinkCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [isChecking, setIsChecking] = useState(false);

  const generateLink = async () => {
    setIsLoading(true);
    setMessage('');

    try {
      const result = await apiService.createTelegramLink();
      setLinkCode(result.linkCode);
      setMessage('–ö–æ–¥ —Å–æ–∑–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ Telegram.');
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const checkLinkStatus = async () => {
    if (!linkCode) return;

    setIsChecking(true);
    try {
      const result = await apiService.checkTelegramLink(linkCode);
      if (result.linked) {
        setMessage('‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!');
        setLinkCode('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        updateUser({
          telegramConnected: true,
          telegramId: result.telegramId,
          telegramUsername: result.telegramUsername,
        });

        // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setMessage(''), 3000);
      }
    } catch (error) {
      console.error('Error checking link:', error);
    } finally {
      setIsChecking(false);
    }
  };

  useEffect(() => {
    let interval;
    if (linkCode && !isChecking) {
      interval = setInterval(checkLinkStatus, 3000);
    }
    return () => clearInterval(interval);
  }, [linkCode, isChecking]);

  const unlinkTelegram = async () => {
    try {
      await apiService.unlinkTelegram();
      setMessage('‚úÖ Telegram –æ—Ç–≤—è–∑–∞–Ω');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      updateUser({
        telegramConnected: false,
        telegramId: null,
        telegramUsername: null,
      });

      setTimeout(() => setMessage(''), 2000);
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ: ' + error.message);
    }
  };

  if (user.telegramConnected) {
    return (
      <div className="telegram-connected">
        <div className="status-header">
          <div className="status-icon">‚úÖ</div>
          <div>
            <h3 className="status-title">Telegram –ø—Ä–∏–≤—è–∑–∞–Ω</h3>
            <p className="status-text">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ Telegram</p>
          </div>
        </div>

        <div className="telegram-info">
          <div className="info-item">
            <span className="info-label">ID:</span>
            <span className="info-value">{user.telegramId}</span>
          </div>
          {user.telegramUsername && (
            <div className="info-item">
              <span className="info-label">Username:</span>
              <span className="info-value">@{user.telegramUsername}</span>
            </div>
          )}
        </div>

        <button onClick={unlinkTelegram} className="btn btn--secondary btn--small unlink-button">
          üîó –û—Ç–≤—è–∑–∞—Ç—å Telegram
        </button>

        {message && <div className="telegram-message success">{message}</div>}
      </div>
    );
  }

  return (
    <div className="telegram-container">
      <div className="telegram-header">
        <div className="telegram-icon">üîî</div>
        <div>
          <h3 className="telegram-title">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</h3>
          <p className="telegram-description">
            –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
          </p>
        </div>
      </div>

      {message && (
        <div className={`telegram-message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
          {message}
        </div>
      )}

      {linkCode ? (
        <div className="link-code-container">
          <div className="code-header">
            <h4 className="code-title">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É</h4>
            <div className="code-display">{linkCode}</div>
          </div>

          <div className="instructions">
            <div className="instruction-step">
              <span className="step-number">1</span>
              <div>
                <strong>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞</strong>
                <p className="step-description">
                  –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É:{' '}
                  <a
                    href="https://t.me/your_bot"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="telegram-link">
                    @CosmetologyBot
                  </a>
                </p>
              </div>
            </div>

            <div className="instruction-step">
              <span className="step-number">2</span>
              <div>
                <strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥</strong>
                <p className="step-description">
                  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥: <strong>{linkCode}</strong>
                </p>
              </div>
            </div>

            <div className="instruction-step">
              <span className="step-number">3</span>
              <div>
                <strong>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</strong>
                <p className="step-description">–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
              </div>
            </div>
          </div>

          {isChecking && (
            <div className="checking-status">
              <div className="loading__spinner"></div>
              –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...
            </div>
          )}
        </div>
      ) : (
        <button
          onClick={generateLink}
          disabled={isLoading}
          className="btn btn--primary link-button">
          {isLoading ? (
            <>
              <div className="loading__spinner"></div>
              –°–æ–∑–¥–∞–µ–º –∫–æ–¥...
            </>
          ) : (
            'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'
          )}
        </button>
      )}
    </div>
  );
};

export default TelegramLink;
