// components/TelegramLink.jsx - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ TELEGRAM
import React, { useState, useEffect } from 'react';
import '../styles/TelegramLink.scss';

const TelegramLink = ({ user, onLink, onUnlink, onCheckLink }) => {
  const [linkCode, setLinkCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isChecking, setIsChecking] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showInstructions, setShowInstructions] = useState(false);

  useEffect(() => {
    if (user?.telegramConnected) {
      setLinkCode('');
      setError('');
      setSuccess('');
    }
  }, [user?.telegramConnected]);

  const generateLinkCode = async () => {
    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      const result = await onLink();
      setLinkCode(result.linkCode);
      setSuccess('–ö–æ–¥ —Å–æ–∑–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ Telegram.');
      setShowInstructions(true);

      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
      startLinkChecking(result.linkCode);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      console.error('Error generating link code:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const startLinkChecking = async (code) => {
    setIsChecking(true);

    const checkInterval = setInterval(async () => {
      try {
        const status = await onCheckLink(code);

        if (status.linked) {
          clearInterval(checkInterval);
          setIsChecking(false);
          setSuccess('‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!');
          setLinkCode('');
          setShowInstructions(false);
        }
      } catch (err) {
        console.error('Error checking link status:', err);
      }
    }, 3000);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
      clearInterval(checkInterval);
      setIsChecking(false);
      if (linkCode) {
        setError('–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
        setLinkCode('');
        setShowInstructions(false);
      }
    }, 10 * 60 * 1000);
  };

  const handleUnlink = async () => {
    if (
      !window.confirm(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å Telegram? –í—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö.',
      )
    ) {
      return;
    }

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      await onUnlink();
      setSuccess('Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Telegram');
      console.error('Error unlinking telegram:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard
      .writeText(linkCode)
      .then(() => {
        setSuccess('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        setTimeout(() => {
          if (success.includes('–ö–æ–¥ —Å–æ–∑–¥–∞–Ω')) {
            setSuccess('–ö–æ–¥ —Å–æ–∑–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ Telegram.');
          }
        }, 2000);
      })
      .catch(() => {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
      });
  };

  const openTelegram = () => {
    window.open('https://t.me/StarCosmetologybot', '_blank', 'noopener,noreferrer');
  };

  if (user?.telegramConnected) {
    return (
      <div className="telegram-linked">
        <div className="telegram-status success">
          <div className="status-header">
            <div className="status-icon">‚úÖ</div>
            <div className="status-info">
              <h3>Telegram –ø—Ä–∏–≤—è–∑–∞–Ω</h3>
              <p>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É</p>
            </div>
          </div>

          <div className="status-details">
            <div className="detail-item">
              <span className="detail-label">ID —á–∞—Ç–∞:</span>
              <span className="detail-value">{user.telegramId}</span>
            </div>
            {user.telegramUsername && (
              <div className="detail-item">
                <span className="detail-label">Username:</span>
                <span className="detail-value">@{user.telegramUsername}</span>
              </div>
            )}
          </div>

          <div className="benefits-list">
            <h4>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</h4>
            <ul>
              <li>
                <span className="benefit-icon">‚úÖ</span>
                <span>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö</span>
              </li>
              <li>
                <span className="benefit-icon">‚úÖ</span>
                <span>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞</span>
              </li>
              <li>
                <span className="benefit-icon">‚úÖ</span>
                <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</span>
              </li>
              <li>
                <span className="benefit-icon">‚úÖ</span>
                <span>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏</span>
              </li>
            </ul>
          </div>

          <div className="status-actions">
            <button onClick={openTelegram} className="btn btn-secondary">
              üí¨ –û—Ç–∫—Ä—ã—Ç—å Telegram
            </button>
            <button onClick={handleUnlink} disabled={isLoading} className="btn btn-danger">
              {isLoading ? '–û—Ç–≤—è–∑—ã–≤–∞–µ–º...' : '‚ùå –û—Ç–≤—è–∑–∞—Ç—å Telegram'}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="telegram-link">
      <div className="telegram-info-card">
        <div className="card-header">
          <div className="header-icon">üì±</div>
          <div className="header-content">
            <h3>–ü—Ä–∏–≤—è–∑–∫–∞ Telegram</h3>
            <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –¥–ª—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
          </div>
        </div>

        <div className="card-features">
          <div className="feature">
            <span className="feature-icon">üîî</span>
            <span className="feature-text">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö</span>
          </div>
          <div className="feature">
            <span className="feature-icon">‚ö°</span>
            <span className="feature-text">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
          </div>
          <div className="feature">
            <span className="feature-icon">üéØ</span>
            <span className="feature-text">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</span>
          </div>
        </div>

        {error && (
          <div className="alert alert-error">
            <span className="alert-icon">‚ö†Ô∏è</span>
            {error}
          </div>
        )}

        {success && (
          <div className="alert alert-success">
            <span className="alert-icon">‚úÖ</span>
            {success}
          </div>
        )}

        {!linkCode ? (
          <div className="link-initiation">
            <button
              onClick={generateLinkCode}
              disabled={isLoading}
              className="btn btn-primary btn-large generate-btn">
              {isLoading ? (
                <>
                  <div className="btn-spinner"></div>
                  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥...
                </>
              ) : (
                <>
                  <span className="btn-icon">üîó</span>
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
                </>
              )}
            </button>

            <button
              onClick={() => setShowInstructions(!showInstructions)}
              className="instructions-toggle">
              {showInstructions ? '–°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é' : '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?'}
            </button>
          </div>
        ) : (
          <div className="link-process">
            <div className="code-section">
              <h4>–í–∞—à –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏:</h4>
              <div className="code-display" onClick={copyToClipboard}>
                <span className="code-value">{linkCode}</span>
                <span className="copy-hint">(–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)</span>
              </div>
              <button onClick={copyToClipboard} className="btn btn-secondary btn-small copy-btn">
                üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
              </button>
            </div>

            <div className="instructions-section">
              <h4>–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å:</h4>
              <ol className="instructions-list">
                <li>
                  <span className="step-number">1</span>
                  <span className="step-text">–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram</span>
                  <button onClick={openTelegram} className="btn btn-secondary btn-small">
                    @StarCosmetologybot
                  </button>
                </li>
                <li>
                  <span className="step-number">2</span>
                  <span className="step-text">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —ç—Ç–æ—Ç –∫–æ–¥:</span>
                  <code className="code-example">{linkCode}</code>
                </li>
                <li>
                  <span className="step-number">3</span>
                  <span className="step-text">–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É</span>
                </li>
              </ol>
            </div>

            {isChecking && (
              <div className="checking-status">
                <div className="checking-spinner"></div>
                <p>–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞...</p>
                <small>–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</small>
              </div>
            )}

            <div className="process-actions">
              <button onClick={generateLinkCode} disabled={isLoading} className="btn btn-secondary">
                üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
              </button>
              <button
                onClick={() => {
                  setLinkCode('');
                  setShowInstructions(false);
                }}
                className="btn btn-danger">
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        )}

        {showInstructions && !linkCode && (
          <div className="pre-instructions">
            <h4>–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏:</h4>
            <div className="instruction-steps">
              <div className="instruction-step">
                <div className="step-icon">1</div>
                <div className="step-content">
                  <strong>–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥</strong>
                  <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞</p>
                </div>
              </div>
              <div className="instruction-step">
                <div className="step-icon">2</div>
                <div className="step-content">
                  <strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É</strong>
                  <p>–ù–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @StarCosmetologybot –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–¥</p>
                </div>
              </div>
              <div className="instruction-step">
                <div className="step-icon">3</div>
                <div className="step-content">
                  <strong>–ì–æ—Ç–æ–≤–æ!</strong>
                  <p>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TelegramLink;
