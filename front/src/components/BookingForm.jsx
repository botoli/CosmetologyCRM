// components/BookingForm.jsx - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ó–ê–ü–ò–°–ò
import React, { useState, useEffect } from 'react';
import '../styles/BookingForm.scss';

const BookingForm = ({ service, onBookingSubmit, onCancel, availableTimes = [], user }) => {
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [comment, setComment] = useState('');
  const [telegramNotification, setTelegramNotification] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [step, setStep] = useState(1);
  const [availableDates, setAvailableDates] = useState([]);

  useEffect(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
    const today = new Date().toISOString().split('T')[0];
    setSelectedDate(today);
    generateAvailableDates();
  }, []);

  const generateAvailableDates = () => {
    const dates = [];
    const today = new Date();

    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
      if (date.getDay() !== 0 && date.getDay() !== 6) {
        dates.push(date.toISOString().split('T')[0]);
      }
    }

    setAvailableDates(dates);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!selectedDate || !selectedTime) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è');
      return;
    }

    setIsSubmitting(true);

    try {
      await onBookingSubmit({
        serviceId: service.id,
        date: selectedDate,
        time: selectedTime,
        comment,
        telegramNotification,
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É —É—Å–ø–µ—Ö–∞
      setStep(3);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getMinDate = () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  const formatTime = (timeString) => {
    return timeString;
  };

  const getTimeSlots = () => {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è
    const periods = {
      morning: { name: 'üåÖ –£—Ç—Ä–æ', slots: [] },
      day: { name: '‚òÄÔ∏è –î–µ–Ω—å', slots: [] },
      evening: { name: 'üåá –í–µ—á–µ—Ä', slots: [] },
    };

    availableTimes.forEach((time) => {
      const hour = parseInt(time.split(':')[0]);
      if (hour < 12) {
        periods.morning.slots.push(time);
      } else if (hour < 17) {
        periods.day.slots.push(time);
      } else {
        periods.evening.slots.push(time);
      }
    });

    return periods;
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    setSelectedTime('');
    setStep(2);
  };

  const handleTimeSelect = (time) => {
    setSelectedTime(time);
    setStep(3);
  };

  const renderStep1 = () => (
    <div className="booking-step">
      <div className="step-header">
        <div className="step-number active">1</div>
        <div className="step-info">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</h3>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏</p>
        </div>
      </div>

      <div className="date-selection">
        <div className="date-picker">
          <label className="date-picker-label">
            <span className="label-icon">üìÖ</span>
            –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É:
          </label>
          <input
            type="date"
            value={selectedDate}
            onChange={(e) => handleDateSelect(e.target.value)}
            min={getMinDate()}
            className="date-input"
          />
        </div>

        <div className="quick-dates">
          <label className="quick-dates-label">–ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:</label>
          <div className="quick-dates-grid">
            {availableDates.slice(0, 5).map((date) => (
              <button
                key={date}
                type="button"
                className={`quick-date-btn ${selectedDate === date ? 'selected' : ''}`}
                onClick={() => handleDateSelect(date)}>
                <div className="date-day">{new Date(date).getDate()}</div>
                <div className="date-month">
                  {new Date(date).toLocaleDateString('ru-RU', { month: 'short' })}
                </div>
                <div className="date-weekday">
                  {new Date(date).toLocaleDateString('ru-RU', { weekday: 'short' })}
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>

      <div className="step-actions">
        <button type="button" className="btn btn-secondary" onClick={onCancel}>
          –û—Ç–º–µ–Ω–∞
        </button>
        <button
          type="button"
          className="btn btn-primary"
          onClick={() => setStep(2)}
          disabled={!selectedDate}>
          –î–∞–ª–µ–µ ‚Üí –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        </button>
      </div>
    </div>
  );

  const renderStep2 = () => {
    const timePeriods = getTimeSlots();

    return (
      <div className="booking-step">
        <div className="step-header">
          <div className="step-number completed">1</div>
          <div className="step-connector"></div>
          <div className="step-number active">2</div>
          <div className="step-info">
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</h3>
            <p>–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {formatDate(selectedDate)}</p>
          </div>
        </div>

        <div className="time-selection">
          {Object.entries(timePeriods).map(
            ([periodKey, period]) =>
              period.slots.length > 0 && (
                <div key={periodKey} className="time-period">
                  <h4 className="period-title">{period.name}</h4>
                  <div className="time-slots-grid">
                    {period.slots.map((time) => (
                      <button
                        key={time}
                        type="button"
                        className={`time-slot ${selectedTime === time ? 'selected' : ''}`}
                        onClick={() => handleTimeSelect(time)}>
                        {formatTime(time)}
                      </button>
                    ))}
                  </div>
                </div>
              ),
          )}

          {availableTimes.length === 0 && (
            <div className="no-slots-message">
              <div className="no-slots-icon">üòî</div>
              <h4>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</h4>
              <p>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏</p>
              <button type="button" className="btn btn-secondary" onClick={() => setStep(1)}>
                ‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É
              </button>
            </div>
          )}
        </div>

        <div className="step-actions">
          <button type="button" className="btn btn-secondary" onClick={() => setStep(1)}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º
          </button>
          <button
            type="button"
            className="btn btn-primary"
            onClick={() => setStep(3)}
            disabled={!selectedTime}>
            –î–∞–ª–µ–µ ‚Üí –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏
          </button>
        </div>
      </div>
    );
  };

  const renderStep3 = () => (
    <div className="booking-step">
      <div className="step-header">
        <div className="step-number completed">1</div>
        <div className="step-connector"></div>
        <div className="step-number completed">2</div>
        <div className="step-connector"></div>
        <div className="step-number active">3</div>
        <div className="step-info">
          <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h3>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å</p>
        </div>
      </div>

      <div className="booking-summary">
        <div className="summary-card">
          <h4>–î–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏</h4>
          <div className="summary-item">
            <span className="summary-label">–£—Å–ª—É–≥–∞:</span>
            <span className="summary-value">{service.name}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
            <span className="summary-value">{service.price} ‚ÇΩ</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
            <span className="summary-value">{service.duration} –º–∏–Ω—É—Ç</span>
          </div>
        </div>

        <div className="summary-card">
          <h4>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</h4>
          <div className="summary-item">
            <span className="summary-label">–î–∞—Ç–∞:</span>
            <span className="summary-value">{formatDate(selectedDate)}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–í—Ä–µ–º—è:</span>
            <span className="summary-value">{selectedTime}</span>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="booking-details">
          <div className="form-group">
            <label htmlFor="booking-comment">
              <span className="label-icon">üí¨</span>
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <textarea
              id="booking-comment"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ, –∞–ª–ª–µ—Ä–≥–∏–∏..."
              rows="3"
            />
            <div className="input-hint">–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤</div>
          </div>

          {user?.telegramConnected && (
            <div className="form-group checkbox-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={telegramNotification}
                  onChange={(e) => setTelegramNotification(e.target.checked)}
                />
                <span className="checkmark"></span>
                <div className="checkbox-content">
                  <span className="checkbox-title">üì± –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram</span>
                  <span className="checkbox-description">
                    –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –æ –≤–∏–∑–∏—Ç–µ –∑–∞ 24 —á–∞—Å–∞ –∏ –ø—Ä–∏—à–ª–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                  </span>
                </div>
              </label>
            </div>
          )}

          {!user?.telegramConnected && (
            <div className="telegram-promo">
              <div className="promo-icon">üí°</div>
              <div className="promo-content">
                <strong>–ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram</strong> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö –∏
                —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
              </div>
            </div>
          )}
        </form>
      </div>

      <div className="step-actions">
        <button type="button" className="btn btn-secondary" onClick={() => setStep(2)}>
          ‚Üê –ù–∞–∑–∞–¥ –∫–æ –≤—Ä–µ–º–µ–Ω–∏
        </button>
        <button
          type="submit"
          className="btn btn-primary"
          onClick={handleSubmit}
          disabled={isSubmitting || availableTimes.length === 0 || !selectedTime}>
          {isSubmitting ? (
            <>
              <div className="btn-spinner"></div>
              –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...
            </>
          ) : (
            <>
              <span className="btn-icon">‚úÖ</span>
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
            </>
          )}
        </button>
      </div>
    </div>
  );

  const renderSuccessStep = () => (
    <div className="booking-step success-step">
      <div className="success-icon">üéâ</div>
      <h2>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</h2>
      <p>–ú—ã –∂–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ</p>

      <div className="success-details">
        <div className="success-item">
          <span className="item-label">–£—Å–ª—É–≥–∞:</span>
          <span className="item-value">{service.name}</span>
        </div>
        <div className="success-item">
          <span className="item-label">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</span>
          <span className="item-value">
            {formatDate(selectedDate)} –≤ {selectedTime}
          </span>
        </div>
        <div className="success-item">
          <span className="item-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
          <span className="item-value">{service.price} ‚ÇΩ</span>
        </div>
      </div>

      {user?.telegramConnected && telegramNotification && (
        <div className="success-notice">
          <span className="notice-icon">üì±</span>
          –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –∑–∞ 24 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞
        </div>
      )}

      <div className="success-actions">
        <button type="button" className="btn btn-primary" onClick={onCancel}>
          –û—Ç–ª–∏—á–Ω–æ!
        </button>
        <button type="button" className="btn btn-secondary" onClick={() => window.print()}>
          üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å
        </button>
      </div>
    </div>
  );

  return (
    <div className="booking-form-overlay">
      <div className="booking-form">
        <div className="booking-header">
          <div className="header-content">
            <h2>{step === 4 ? '‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É'}</h2>
            <p>{service.name}</p>
          </div>
          <button className="close-button" onClick={onCancel} disabled={isSubmitting}>
            √ó
          </button>
        </div>

        <div className="booking-progress">
          <div className="progress-steps">
            <div className={`progress-step ${step >= 1 ? 'active' : ''}`}>
              <span className="step-dot"></span>
              <span className="step-label">–î–∞—Ç–∞</span>
            </div>
            <div className={`progress-step ${step >= 2 ? 'active' : ''}`}>
              <span className="step-dot"></span>
              <span className="step-label">–í—Ä–µ–º—è</span>
            </div>
            <div className={`progress-step ${step >= 3 ? 'active' : ''}`}>
              <span className="step-dot"></span>
              <span className="step-label">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</span>
            </div>
          </div>
        </div>

        <div className="booking-content">
          {step === 1 && renderStep1()}
          {step === 2 && renderStep2()}
          {step === 3 && renderStep3()}
          {step === 4 && renderSuccessStep()}
        </div>
      </div>
    </div>
  );
};

export default BookingForm;
