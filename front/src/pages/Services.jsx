// pages/Services.jsx - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –£–°–õ–£–ì
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { useNavigate, useLocation } from 'react-router-dom';
import ServiceCard from '../components/ServiceCard';
import BookingForm from '../components/BookingForm';
import { api } from '../utils/api';
import '../styles/Services.scss';

const Services = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [services, setServices] = useState([]);
  const [filteredServices, setFilteredServices] = useState([]);
  const [selectedService, setSelectedService] = useState(null);
  const [availableTimes, setAvailableTimes] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [categories, setCategories] = useState([]);

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    if (!user) {
      navigate('/login', { replace: true });
    }
  }, [user, navigate]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
  useEffect(() => {
    if (location.state?.rescheduleBookingId) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
      console.log('–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏:', location.state.rescheduleBookingId);
    }
  }, [location]);

  useEffect(() => {
    fetchServices();
  }, []);

  useEffect(() => {
    filterServices();
  }, [services, searchTerm, selectedCategory]);

  const fetchServices = async () => {
    try {
      setIsLoading(true);
      setError('');
      const response = await api.get('/api/services');
      const servicesData = response || [];

      setServices(servicesData);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const uniqueCategories = [...new Set(servicesData.map((service) => service.category))];
      setCategories(['all', ...uniqueCategories]);
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª—É–≥–∏');
      setServices([]);
    } finally {
      setIsLoading(false);
    }
  };

  const filterServices = () => {
    let filtered = services;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (searchTerm) {
      filtered = filtered.filter(
        (service) =>
          service.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          service.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
          service.category.toLowerCase().includes(searchTerm.toLowerCase()),
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (selectedCategory !== 'all') {
      filtered = filtered.filter((service) => service.category === selectedCategory);
    }

    setFilteredServices(filtered);
  };

  const fetchAvailableTimes = async (serviceId, date) => {
    try {
      const response = await api.get(
        `/api/bookings/available-times?date=${date}&serviceId=${serviceId}`,
      );
      setAvailableTimes(response?.availableSlots || []);
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è');
      setAvailableTimes([]);
    }
  };

  const handleBookService = async (service) => {
    if (!user) {
      navigate('/login', {
        state: { from: location, message: '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É' },
      });
      return;
    }

    setSelectedService(service);
    const today = new Date().toISOString().split('T')[0];
    await fetchAvailableTimes(service.id, today);
  };

  const handleBookingSubmit = async (bookingData) => {
    try {
      await api.post('/api/bookings', bookingData);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      setError('');
      setSelectedService(null);
      setAvailableTimes([]);

      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast notification –≤–º–µ—Å—Ç–æ alert
      setTimeout(() => {
        if (window.showSuccessMessage) {
          window.showSuccessMessage('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
        } else {
          alert('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
        }
      }, 100);
    } catch (err) {
      const errorMessage = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      setError(errorMessage);
      throw err;
    }
  };

  const getPopularServices = () => {
    return services.filter((service) => service.popular).slice(0, 3);
  };

  if (!user) {
    return null;
  }

  return (
    <div className="services-page">
      {/* –•–µ–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="services-hero">
        <div className="hero-content">
          <h1> –ù–∞—à–∏ —É—Å–ª—É–≥–∏</h1>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</p>

          <div className="hero-stats">
            <div className="stat">
              <div className="stat-number">{services.length}</div>
              <div className="stat-label">–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥</div>
            </div>
            <div className="stat">
              <div className="stat-number">24/7</div>
              <div className="stat-label">–æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å</div>
            </div>
            <div className="stat">
              <div className="stat-number">‚≠ê 4.9</div>
              <div className="stat-label">—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
            </div>
          </div>
        </div>

        <div className="hero-actions">
          <button onClick={() => navigate('/profile')} className="btn btn-secondary">
            üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏
          </button>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ */}
      <div className="filters-panel">
        <div className="search-box">
          <span className="search-icon">üîç</span>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —É—Å–ª—É–≥..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
          {searchTerm && (
            <button onClick={() => setSearchTerm('')} className="clear-search">
              ‚úï
            </button>
          )}
        </div>

        <div className="category-filters">
          <div className="category-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</div>
          <div className="category-buttons">
            {categories.map((category) => (
              <button
                key={category}
                className={`category-btn ${selectedCategory === category ? 'active' : ''}`}
                onClick={() => setSelectedCategory(category)}>
                {category === 'all' ? '–í—Å–µ —É—Å–ª—É–≥–∏' : category}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ */}
      {getPopularServices().length > 0 && (
        <section className="popular-section">
          <h2>‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏</h2>
          <div className="popular-grid">
            {getPopularServices().map((service) => (
              <ServiceCard
                key={service.id}
                service={service}
                onBook={handleBookService}
                featured={true}
              />
            ))}
          </div>
        </section>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
      <section className="services-section">
        <div className="section-header">
          <h2>
            {selectedCategory === 'all' ? '–í—Å–µ —É—Å–ª—É–≥–∏' : selectedCategory}
            <span className="services-count"> ({filteredServices.length})</span>
          </h2>

          <div className="view-options">
            <button className="view-option active">üìã –°–ø–∏—Å–æ–∫</button>
            <button className="view-option">üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</button>
          </div>
        </div>

        {error && (
          <div className="alert alert-error">
            <span className="alert-icon">‚ö†Ô∏è</span>
            {error}
          </div>
        )}

        {isLoading ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥...</p>
          </div>
        ) : filteredServices.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üîç</div>
            <h3>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
            <button
              onClick={() => {
                setSearchTerm('');
                setSelectedCategory('all');
              }}
              className="btn btn-primary">
              üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        ) : (
          <div className="services-grid">
            {filteredServices.map((service) => (
              <ServiceCard key={service.id} service={service} onBook={handleBookService} />
            ))}
          </div>
        )}
      </section>

      {/* –ë–∞–Ω–Ω–µ—Ä —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
      <section className="cta-banner">
        <div className="cta-content">
          <h3>–ì–æ—Ç–æ–≤—ã –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—å—Å—è?</h3>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º</p>
          <button
            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
            className="btn btn-primary btn-large">
            üí´ –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É
          </button>
        </div>
        <div className="cta-decoration">
          <span className="decoration-icon">‚ú®</span>
          <span className="decoration-icon">üíÜ‚Äç‚ôÄÔ∏è</span>
          <span className="decoration-icon">üåü</span>
        </div>
      </section>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏ */}
      {selectedService && (
        <BookingForm
          service={selectedService}
          onBookingSubmit={handleBookingSubmit}
          onCancel={() => {
            setSelectedService(null);
            setAvailableTimes([]);
          }}
          availableTimes={availableTimes}
          user={user}
        />
      )}
    </div>
  );
};

export default Services;
