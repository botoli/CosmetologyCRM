// pages/Login.jsx - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê
import React, { useState, useEffect } from 'react';
import '../styles/Auth.scss';
import { useAuth } from '../hooks/useAuth';
import { useNavigate, useLocation } from 'react-router-dom';

const Login = () => {
  const [formData, setFormData] = useState({
    phoneOrEmail: '',
    password: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const { login, user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    if (user) {
      navigate('/profile', { replace: true });
    }
  }, [user, navigate]);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.phoneOrEmail.trim() || !formData.password.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      await login(formData);
      const from = location.state?.from?.pathname || '/profile';
      navigate(from, { replace: true });
    } catch (err) {
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDemoLogin = async (role = 'client') => {
    setIsLoading(true);
    setError('');

    try {
      const demoCredentials =
        role === 'admin'
          ? { phoneOrEmail: 'admin@beauty.ru', password: 'admin123' }
          : { phoneOrEmail: 'client@mail.ru', password: 'client123' };

      await login(demoCredentials);
      navigate('/profile', { replace: true });
    } catch (err) {
      setError('–î–µ–º–æ-–≤—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-header">
          <div className="auth-icon">üîê</div>
          <h1>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</h1>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç BeautyCRM</p>
        </div>

        <form onSubmit={handleSubmit} className="auth-form">
          {error && (
            <div className="alert alert-error">
              <span className="alert-icon">‚ö†Ô∏è</span>
              {error}
            </div>
          )}

          <div className="form-group">
            <label htmlFor="phoneOrEmail">
              <span className="label-icon">üìß</span>
              Email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
            </label>
            <input
              type="text"
              id="phoneOrEmail"
              name="phoneOrEmail"
              value={formData.phoneOrEmail}
              onChange={handleChange}
              placeholder="example@mail.ru –∏–ª–∏ +79991234567"
              required
              disabled={isLoading}
              autoComplete="username"
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">
              <span className="label-icon">üîë</span>
              –ü–∞—Ä–æ–ª—å
            </label>
            <div className="password-input-container">
              <input
                type={showPassword ? 'text' : 'password'}
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
                required
                disabled={isLoading}
                autoComplete="current-password"
              />
              <button
                type="button"
                className="password-toggle"
                onClick={() => setShowPassword(!showPassword)}
                disabled={isLoading}>
                {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
          </div>

          <button
            type="submit"
            className="btn btn-primary btn-full auth-submit-btn"
            disabled={isLoading}>
            {isLoading ? (
              <>
                <div className="btn-spinner"></div>
                –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...
              </>
            ) : (
              <>
                <span className="btn-icon">üöÄ</span>
                –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
              </>
            )}
          </button>

          <div className="auth-divider">
            <span>–∏–ª–∏</span>
          </div>

          <div className="auth-links">
            <p>
              –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <a href="/register" className="auth-link">
                üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
              </a>
            </p>
          </div>
        </form>

        <div className="auth-features">
          <h3>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã:</h3>
          <div className="features-list">
            <div className="feature-item">
              <span className="feature-icon">üìÖ</span>
              <span>–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å 24/7</span>
            </div>
            <div className="feature-item">
              <span className="feature-icon">üîî</span>
              <span>–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</span>
            </div>
            <div className="feature-item">
              <span className="feature-icon">üì±</span>
              <span>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            </div>
            <div className="feature-item">
              <span className="feature-icon">üíé</span>
              <span>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
