// pages/Admin.jsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò API –í–´–ó–û–í–ê–ú–ò
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { useNavigate } from 'react-router-dom';
import TelegramLink from '../components/TelegramLink';
import { api } from '../utils/api';
import '../styles/Admin.scss';

const Admin = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [activeSection, setActiveSection] = useState('dashboard');
  const [bookings, setBookings] = useState([]);
  const [clients, setClients] = useState([]);
  const [services, setServices] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState({
    totalClients: 0,
    todayBookings: 0,
    pendingBookings: 0,
    completedBookings: 0,
    totalRevenue: 0,
  });

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
  useEffect(() => {
    if (!user) {
      navigate('/login', { replace: true });
      return;
    }

    if (user.role !== 'admin') {
      navigate('/services', { replace: true });
      return;
    }

    fetchDashboardData();
  }, [user, navigate]);

  const fetchDashboardData = async () => {
    setIsLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      const [bookingsData, clientsData, servicesData] = await Promise.all([
        api.get('/api/bookings/all').catch(() => []),
        api.get('/api/clients').catch(() => []),
        api.get('/api/services').catch(() => []),
      ]);

      setBookings(bookingsData || []);
      setClients(clientsData || []);
      setServices(servicesData || []);

      // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const today = new Date().toISOString().split('T')[0];
      const todayBookings = (bookingsData || []).filter((b) => b.booking_date === today);
      const pendingBookings = (bookingsData || []).filter((b) => b.status === 'pending');
      const completedBookings = (bookingsData || []).filter((b) => b.status === 'completed');
      const totalRevenue = completedBookings.reduce(
        (sum, b) => sum + (parseFloat(b.price) || 0),
        0,
      );

      setStats({
        totalClients: (clientsData || []).length,
        todayBookings: todayBookings.length,
        pendingBookings: pendingBookings.length,
        completedBookings: completedBookings.length,
        totalRevenue: totalRevenue,
      });
    } catch (err) {
      console.error('Error fetching admin data:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const updateBookingStatus = async (bookingId, status) => {
    try {
      await api.put(`/api/bookings/${bookingId}/status`, { status });
      await fetchDashboardData();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + err.message);
    }
  };

  const deleteBooking = async (bookingId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) return;

    try {
      await api.delete(`/api/bookings/${bookingId}`);
      await fetchDashboardData();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ' + err.message);
    }
  };

  const addNewService = async () => {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
    const category = prompt('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:');
    const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ:');
    const price = prompt('–¶–µ–Ω–∞:');
    const duration = prompt('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):');

    if (!name || !category || !price || !duration) {
      alert('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      return;
    }

    try {
      await api.post('/api/services', {
        name,
        category,
        description,
        price: parseFloat(price),
        duration: parseInt(duration),
      });
      await fetchDashboardData();
      alert('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: ' + err.message);
    }
  };

  const editService = async (service) => {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', service.name);
    const category = prompt('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', service.category);
    const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ:', service.description);
    const price = prompt('–¶–µ–Ω–∞:', service.price);
    const duration = prompt('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):', service.duration);

    if (!name || !category || !price || !duration) {
      alert('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      return;
    }

    try {
      await api.put(`/api/services/${service.id}`, {
        name,
        category,
        description,
        price: parseFloat(price),
        duration: parseInt(duration),
      });
      await fetchDashboardData();
      alert('–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: ' + err.message);
    }
  };

  const deleteService = async (serviceId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?')) return;

    try {
      await api.delete(`/api/services/${serviceId}`);
      await fetchDashboardData();
      alert('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: ' + err.message);
    }
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      pending: { text: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ', class: 'status-pending' },
      confirmed: { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', class: 'status-confirmed' },
      cancelled: { text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞', class: 'status-cancelled' },
      completed: { text: 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∞', class: 'status-completed' },
    };

    const statusInfo = statusMap[status] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
  const handleTelegramLink = async () => {
    try {
      const response = await api.post('/api/telegram/link');
      return response;
    } catch (err) {
      throw new Error(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏');
    }
  };

  const handleTelegramUnlink = async () => {
    try {
      await api.post('/api/telegram/unlink');
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      window.location.reload();
    } catch (err) {
      throw new Error(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å Telegram');
    }
  };

  const handleCheckLink = async (code) => {
    try {
      const response = await api.get(`/api/telegram/check-link/${code}`);
      return response;
    } catch (err) {
      throw new Error(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏');
    }
  };

  if (user?.role !== 'admin') {
    return (
      <div className="admin-page">
        <div className="access-denied">
          <h1>‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
          <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
          <button onClick={() => navigate('/services')} className="btn btn-primary">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Å–ª—É–≥–∞–º
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-page">
      <div className="admin-header">
        <div className="header-content">
          <h1>üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
          <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–ø–∏—Å–∏</p>
        </div>
      </div>

      <div className="admin-layout">
        <nav className="admin-sidebar">
          <button
            className={`sidebar-item ${activeSection === 'dashboard' ? 'active' : ''}`}
            onClick={() => setActiveSection('dashboard')}>
            üìä –î–∞—à–±–æ—Ä–¥
          </button>
          <button
            className={`sidebar-item ${activeSection === 'bookings' ? 'active' : ''}`}
            onClick={() => setActiveSection('bookings')}>
            üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
          </button>
          <button
            className={`sidebar-item ${activeSection === 'clients' ? 'active' : ''}`}
            onClick={() => setActiveSection('clients')}>
            üë• –ö–ª–∏–µ–Ω—Ç—ã
          </button>
          <button
            className={`sidebar-item ${activeSection === 'services' ? 'active' : ''}`}
            onClick={() => setActiveSection('services')}>
            üíÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏
          </button>
          <button
            className={`sidebar-item ${activeSection === 'telegram' ? 'active' : ''}`}
            onClick={() => setActiveSection('telegram')}>
            üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </button>
          <button
            className={`sidebar-item ${activeSection === 'reports' ? 'active' : ''}`}
            onClick={() => setActiveSection('reports')}>
            üìà –û—Ç—á–µ—Ç—ã
          </button>
        </nav>

        <main className="admin-content">
          {isLoading ? (
            <div className="loading-state">
              <div className="loading-spinner"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
            </div>
          ) : (
            <>
              {activeSection === 'dashboard' && (
                <div className="dashboard-section">
                  <div className="dashboard-header">
                    <h2>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                    {user.telegramConnected && (
                      <div className="telegram-status-badge">
                        <span className="telegram-icon">üì±</span>
                        Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω
                      </div>
                    )}
                  </div>
                  <div className="stats-grid">
                    <div className="stat-card">
                      <div className="stat-icon">üë•</div>
                      <div className="stat-content">
                        <div className="stat-value">{stats.totalClients}</div>
                        <div className="stat-label">–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                      </div>
                    </div>
                    <div className="stat-card">
                      <div className="stat-icon">üìÖ</div>
                      <div className="stat-content">
                        <div className="stat-value">{stats.todayBookings}</div>
                        <div className="stat-label">–ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è</div>
                      </div>
                    </div>
                    <div className="stat-card">
                      <div className="stat-icon">‚è≥</div>
                      <div className="stat-content">
                        <div className="stat-value">{stats.pendingBookings}</div>
                        <div className="stat-label">–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
                      </div>
                    </div>
                    <div className="stat-card">
                      <div className="stat-icon">‚úÖ</div>
                      <div className="stat-content">
                        <div className="stat-value">{stats.completedBookings}</div>
                        <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π</div>
                      </div>
                    </div>
                    <div className="stat-card revenue">
                      <div className="stat-icon">üí∞</div>
                      <div className="stat-content">
                        <div className="stat-value">{stats.totalRevenue} ‚ÇΩ</div>
                        <div className="stat-label">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</div>
                      </div>
                    </div>
                  </div>

                  <div className="recent-bookings">
                    <div className="section-header">
                      <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h3>
                      <button onClick={fetchDashboardData} className="btn btn-secondary btn-small">
                        üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                      </button>
                    </div>
                    <div className="bookings-list">
                      {bookings.slice(0, 5).map((booking) => (
                        <div key={booking.id} className="booking-item">
                          <div className="booking-info">
                            <div className="client-name">
                              <strong>
                                {booking.user_name} {booking.user_surname}
                              </strong>
                            </div>
                            <div className="service-info">
                              <span>{booking.service_name}</span>
                              <span className="booking-date">
                                {booking.booking_date} –≤ {booking.booking_time}
                              </span>
                            </div>
                          </div>
                          <div className="booking-actions">
                            {getStatusBadge(booking.status)}
                            <select
                              value={booking.status}
                              onChange={(e) => updateBookingStatus(booking.id, e.target.value)}
                              className="status-select">
                              <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
                              <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</option>
                              <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–∞</option>
                              <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
                            </select>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}

              {activeSection === 'bookings' && (
                <div className="bookings-section">
                  <div className="section-header">
                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏</h2>
                    <span className="section-count">({bookings.length})</span>
                  </div>

                  <div className="bookings-table">
                    <div className="table-header">
                      <span>–ö–ª–∏–µ–Ω—Ç</span>
                      <span>–£—Å–ª—É–≥–∞</span>
                      <span>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</span>
                      <span>–°—Ç–æ–∏–º–æ—Å—Ç—å</span>
                      <span>–°—Ç–∞—Ç—É—Å</span>
                      <span>–î–µ–π—Å—Ç–≤–∏—è</span>
                    </div>
                    {bookings.map((booking) => (
                      <div key={booking.id} className="table-row">
                        <span className="client-cell">
                          <strong>
                            {booking.user_name} {booking.user_surname}
                          </strong>
                          <br />
                          <small>{booking.user_phone}</small>
                        </span>
                        <span>{booking.service_name}</span>
                        <span>
                          {booking.booking_date}
                          <br />
                          <small>{booking.booking_time}</small>
                        </span>
                        <span>{booking.price} ‚ÇΩ</span>
                        <span>
                          <select
                            value={booking.status}
                            onChange={(e) => updateBookingStatus(booking.id, e.target.value)}
                            className="status-select">
                            <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
                            <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</option>
                            <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–∞</option>
                            <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
                          </select>
                        </span>
                        <span>
                          <button
                            onClick={() => deleteBooking(booking.id)}
                            className="btn btn-danger btn-small">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeSection === 'clients' && (
                <div className="clients-section">
                  <div className="section-header">
                    <h2>–ö–ª–∏–µ–Ω—Ç—ã</h2>
                    <span className="section-count">({clients.length})</span>
                  </div>
                  <div className="clients-grid">
                    {clients.map((client) => (
                      <div key={client.id} className="client-card">
                        <div className="client-header">
                          <div className="client-avatar">
                            {client.name?.[0]}
                            {client.surname?.[0]}
                          </div>
                          <div className="client-info">
                            <h3>
                              {client.name} {client.surname}
                            </h3>
                            <p className="client-email">{client.email}</p>
                          </div>
                        </div>
                        <div className="client-details">
                          <p>üìû {client.phone}</p>
                          <div className="client-stats">
                            <span>üìÖ –ó–∞–ø–∏—Å–µ–π: {client.bookings_count || 0}</span>
                            {client.last_visit && (
                              <span>üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {client.last_visit}</span>
                            )}
                          </div>
                        </div>
                        {client.telegram_id && (
                          <div className="telegram-badge">üì± Telegram –ø—Ä–∏–≤—è–∑–∞–Ω</div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeSection === 'services' && (
                <div className="services-section">
                  <div className="section-header">
                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</h2>
                    <button onClick={addNewService} className="btn btn-primary">
                      ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
                    </button>
                  </div>
                  <div className="services-list">
                    {services.map((service) => (
                      <div key={service.id} className="service-item">
                        <div className="service-info">
                          <h3>{service.name}</h3>
                          <p className="service-category">{service.category}</p>
                          <p className="service-description">{service.description}</p>
                        </div>
                        <div className="service-pricing">
                          <span className="price">{service.price} ‚ÇΩ</span>
                          <span className="duration">{service.duration} –º–∏–Ω</span>
                        </div>
                        <div className="service-actions">
                          <button
                            onClick={() => editService(service)}
                            className="btn btn-secondary btn-small">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                          </button>
                          <button
                            onClick={() => deleteService(service.id)}
                            className="btn btn-danger btn-small">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeSection === 'telegram' && (
                <div className="telegram-section">
                  <div className="section-header">
                    <h2>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
                    <p>–ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö</p>
                  </div>

                  <div className="telegram-admin-info">
                    <div className="info-card">
                      <h3>üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h3>
                      <p>–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:</p>
                      <ul className="benefits-list">
                        <li>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö</li>
                        <li>üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö</li>
                        <li>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–ø–∏—Å—è–º</li>
                        <li>üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö</li>
                      </ul>
                    </div>
                  </div>

                  <TelegramLink
                    user={user}
                    onLink={handleTelegramLink}
                    onUnlink={handleTelegramUnlink}
                    onCheckLink={handleCheckLink}
                  />
                </div>
              )}

              {activeSection === 'reports' && (
                <div className="reports-section">
                  <h2>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã</h2>
                  <div className="reports-actions">
                    <button className="btn btn-primary">üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü</button>
                    <button className="btn btn-primary">üí∞ –û—Ç—á–µ—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ</button>
                    <button className="btn btn-secondary">üë• –û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</button>
                  </div>
                  <div className="revenue-stats">
                    <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏</h3>
                    <div className="revenue-card">
                      <div className="revenue-value">{stats.totalRevenue} ‚ÇΩ</div>
                      <div className="revenue-label">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</div>
                    </div>
                    <div className="revenue-details">
                      <div className="revenue-item">
                        <span>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</span>
                        <span>{stats.completedBookings}</span>
                      </div>
                      <div className="revenue-item">
                        <span>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</span>
                        <span>
                          {stats.completedBookings > 0
                            ? Math.round(stats.totalRevenue / stats.completedBookings)
                            : 0}{' '}
                          ‚ÇΩ
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </main>
      </div>
    </div>
  );
};

export default Admin;
