import { useState, useEffect } from 'react';
import { useAppDispatch, useAppSelector } from '../hooks/redux';
import { updateTelegram } from '../store';
import { FaTelegram, FaCheck, FaSpinner } from 'react-icons/fa';
import api from '../services/api';
import API_ENDPOINTS from '../services/apiEndpoints';

const ClientSettings = () => {
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state) => state.auth);
  const [linkCode, setLinkCode] = useState('');
  const [isLinking, setIsLinking] = useState(false);
  const [checkingInterval, setCheckingInterval] = useState<NodeJS.Timeout | null>(null);

  const handleTelegramLink = async () => {
    setIsLinking(true);

    try {
      const response = await api.post(API_ENDPOINTS.linkTelegram);
      const { linkCode: newLinkCode } = response.data;
      setLinkCode(newLinkCode);

      alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥: ${newLinkCode}`);

      // –û–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏
      const interval = setInterval(async () => {
        try {
          const checkResponse = await api.get(API_ENDPOINTS.checkLink(newLinkCode));
          if (checkResponse.data.linked) {
            clearInterval(interval);
            dispatch(
              updateTelegram({
                telegramId: checkResponse.data.telegramId,
                telegramUsername: checkResponse.data.telegramUsername,
              }),
            );
            setIsLinking(false);
            setLinkCode('');
            alert('Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!');
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
      }, 3000);

      setCheckingInterval(interval);

      // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
      setTimeout(() => {
        if (checkingInterval) {
          clearInterval(checkingInterval);
        }
        setIsLinking(false);
        setLinkCode('');
        alert('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }, 600000);
    } catch (error: any) {
      console.error('Telegram link error:', error);
      setIsLinking(false);
      alert(error.response?.data?.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  const handleUnlinkTelegram = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å Telegram?')) return;

    try {
      await api.post(API_ENDPOINTS.unlinkTelegram);
      dispatch(updateTelegram({ telegramId: undefined, telegramUsername: undefined }));
      alert('Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω');
    } catch (error: any) {
      console.error('Unlink error:', error);
      alert(error.response?.data?.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ');
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (checkingInterval) {
        clearInterval(checkingInterval);
      }
    };
  }, [checkingInterval]);

  return (
    <div>
      <h2 style={{ marginBottom: '2rem' }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</h2>

      <div className="card">
        <h3 style={{ marginBottom: '1.5rem' }}>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
        <div className="form-group">
          <label>–ò–º—è</label>
          <input type="text" value={user?.name || ''} disabled style={{ background: '#f5f5f5' }} />
        </div>
        <div className="form-group">
          <label>–§–∞–º–∏–ª–∏—è</label>
          <input
            type="text"
            value={user?.surname || ''}
            disabled
            style={{ background: '#f5f5f5' }}
          />
        </div>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            value={user?.email || ''}
            disabled
            style={{ background: '#f5f5f5' }}
          />
        </div>
        <div className="form-group">
          <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
          <input type="tel" value={user?.phone || ''} disabled style={{ background: '#f5f5f5' }} />
        </div>
      </div>

      <div className="card">
        <h3 style={{ marginBottom: '1.5rem' }}>–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã</h3>
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            padding: '1.5rem',
            background: user?.telegramConnected ? '#d1fae5' : '#fee2e2',
            borderRadius: '8px',
          }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
            <FaTelegram size={32} color={user?.telegramConnected ? '#10b981' : '#ef4444'} />
            <div>
              <h4>Telegram</h4>
              <p style={{ fontSize: '0.875rem', color: '#6b7280' }}>
                {user?.telegramConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
              </p>
            </div>
          </div>
          {user?.telegramConnected ? (
            <>
              <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
                <span style={{ fontSize: '0.875rem', color: '#10b981' }}>
                  <FaCheck /> {user.telegramUsername || '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ'}
                </span>
                <button className="btn btn-danger" onClick={handleUnlinkTelegram}>
                  –û—Ç–≤—è–∑–∞—Ç—å
                </button>
              </div>
            </>
          ) : (
            <button className="btn btn-primary" onClick={handleTelegramLink} disabled={isLinking}>
              {isLinking ? <FaSpinner className="loading-spinner" /> : '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'}
              {isLinking ? ' –ü—Ä–∏–≤—è–∑–∫–∞...' : ''}
            </button>
          )}
        </div>

        {!user?.telegramConnected && (
          <div
            style={{
              marginTop: '1rem',
              padding: '1rem',
              background: '#f8fafc',
              borderRadius: '8px',
            }}>
            <p style={{ fontSize: '0.875rem', marginBottom: '0.75rem', fontWeight: 600 }}>
              üì± –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram:
            </p>
            <ol
              style={{
                fontSize: '0.875rem',
                marginTop: '0.5rem',
                paddingLeft: '1.25rem',
                lineHeight: '1.75',
              }}>
              <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram" –≤—ã—à–µ</li>
              <li>–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
              <li>
                –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞{' '}
                <code style={{ background: '#e5e7eb', padding: '2px 6px', borderRadius: '4px' }}>
                  @your_bot_name
                </code>
              </li>
              <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É</li>
              <li>–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
            </ol>
            {linkCode && (
              <div
                style={{
                  marginTop: '1rem',
                  padding: '1rem',
                  background: 'white',
                  borderRadius: '8px',
                  textAlign: 'center',
                  border: '2px dashed #7b9acc',
                }}>
                <p style={{ marginBottom: '0.5rem', fontWeight: 600 }}>–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:</p>
                <strong style={{ fontSize: '1.5rem', color: '#7b9acc', letterSpacing: '2px' }}>
                  {linkCode}
                </strong>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ClientSettings;
